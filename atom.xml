<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>菜鸟记录</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-04T13:47:28.404Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Johanan Gao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux网络编程</title>
    <link href="http://yoursite.com/2018/11/29/Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/11/29/Linux网络编程/</id>
    <published>2018-11-29T07:16:00.000Z</published>
    <updated>2018-12-04T13:47:28.404Z</updated>
    
    <content type="html"><![CDATA[<p>以太网帧格式(MAC地址)<br>ARP数据报格式，获取下一跳的mac地址<br>IP段格式<br>UDP/TCP数据报格式<br>NAT映射，私网IP共用<br>打洞机制，提高传输效率<br>套接字：<br>socket成对出现<br>绑定IP+端口<br>一个文件描述符指向两个缓冲区：一个读，一个写</p><p>网络字节序<br>网络数据流采用大端字节序<br>网络字节序和主机字节序的转换</p><p>#include&lt;arpa/inet.h&gt;<br>uint32_t htonl(uint32_t hostlong);<br>uint16_t htons(uint16_t hostshort);<br>uint32_t ntohl(uint32_t netlong);<br>uint16_t ntohs(uint16_t netshort);<br>h表示host,n表示network,l表示long,s表示short</p><p>IP转换<br>inet_pton()<br>inet_ntop()</p><p>sockaddr数据结构<br>struct sockaddr xx;<br>查看man 7 ip<br>struct sockaddr_in xx;<br>struct sockaddr_un xx;<br>struct sockaddr_in6 xx;</p><p>创建socket模型：<br>建立套接字socket()<br>绑定IP端口号bind()<br>同时建立链接的数listen()<br>阻塞等待客户端发起连接accept()<br>发起连接请求connect()</p><p>测试：nc IP 端口</p><p>三次握手四次挥手<br>TCP不会丢包(错)，丢了可以重传<br>UDP:组播(多播)、广播</p><p>MTU、mss、半关闭<br>MTU:最大传输单元 受协议限制 以太网1500 IP65536<br>mss:受MTU标示一个数据包携带数据的上限数<br>win:滑动窗口-当前本端能接收的数据上限值</p><p>IPV4:32位 192.168.12.0(10进制)<br>IPV6:128位 CDCD:910A:2222:5498:8475:1111:3900:2020(16进制)</p><p>高并发服务器：<br>多进程多线程，如果数量太大系统开销也大</p><p>多路I/O转接服务器<br>select()<br>cat /proc/sys/fs/file-max<br>vi /etc/security/limits.conf<br>poll()<br>epoll()</p><p>sock选项setsockopt()</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以太网帧格式(MAC地址)&lt;br&gt;ARP数据报格式，获取下一跳的mac地址&lt;br&gt;IP段格式&lt;br&gt;UDP/TCP数据报格式&lt;br&gt;NAT映射，私网IP共用&lt;br&gt;打洞机制，提高传输效率&lt;br&gt;套接字：&lt;br&gt;socket成对出现&lt;br&gt;绑定IP+端口&lt;br&gt;一个文件描述符
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="C语言" scheme="http://yoursite.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>线程同步</title>
    <link href="http://yoursite.com/2018/11/28/%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/"/>
    <id>http://yoursite.com/2018/11/28/线程同步/</id>
    <published>2018-11-28T07:16:00.000Z</published>
    <updated>2018-11-29T07:16:33.429Z</updated>
    
    <content type="html"><![CDATA[<p>线程：<br>创建线程之后，地址空间没有变化<br>进程退出成了线程-主线程<br>创建出的子线程和主线程共用地址空间<br>主线程和子线程有各自独立的pcb<br>-子线程的pcb是从主线程拷贝来的<br>主线程与子线程共享：<br>.txt、.bss、.data、堆、动态库加载区、环境变量区、命令行参数<br>不共享：<br>栈被各个线程均分</p><p>线程相关：<br>自行安装线程man page，命令：<br>sudo apt-get install manpages-posix-dev<br>察看指定线程的LWP号：<br>线程号和线程ID是有区别的<br>线程号是给内核看的<br>查看方式:找到程序的进程ID:ps -Lf pid<br>多线程和多进程区别：<br>多进程：<br>始终共享的资源<br>代码、文件描述符、mmap<br>线程共享：堆、全局变量<br>线程节省资源</p><p>编译：gcc xxx.c -lpthread<br>创建线程函数：pthread_create()<br>输出自己的线程号：pthread_self()<br>打印错误码的错误信息strerror()<br>单个线程退出pthread_exit()<br>阻塞等待线程退出，获取线程退出状态<br>回收子线程pthread_join()<br>线程分离pthread_detach()<br>调用该函数之后不需要pthread_join<br>子线程会自动回收自己的pcb<br>杀死(取消)线程pthread_cancel()<br>pthread_testcancel()<br>判断线程ID是否相等pthread_equal()</p><p>线程分离：<br>pthread_attr_init()<br>pthread_attr_setdetachstate()<br>PTHREAD_CREATE_DETACHED分离<br>PTHREAD_CREATE_JOINABLE非分离<br>pthread_attr_destroy()<br>数据混乱原因：操作了共享资源、cpu调度问题<br>解决：线程同步</p><p>锁：<br>如果锁是锁着的：<br>线程阻塞，阻塞在这把锁上<br>如果锁是打开的：<br>线程访问共享资源，然后锁上锁<br>本来多线程访问共享资源时候，可以并行<br>通过加锁机制并行-&gt;串行</p><p>互斥锁:串行<br>创建互斥锁：pthread_mutex_t mutex;<br>初始化互斥锁pthread_mutex_init()<br>销毁互斥锁pthread_mutex_destroy()<br>加锁pthread_mutex_lock()阻塞<br>尝试加锁pthread_mutex_trylock()不阻塞<br>解锁pthread_mutex_unlock()<br>互斥锁同步线程：所有线程都需要加锁<br>原子操作：<br>cpu处理一个指令，线程/进程在处理完这个指令之前是不会失去cpu的</p><p>读写锁：<br>pthread_rwlock_t lock;<br>初始化读写锁pthread_rwlock_init()<br>pthread_rwlock_destroy()<br>pthread_rwlock_rdlock()<br>pthread_rwlock_tryrdlock()<br>pthread_rwlock_wrlock()<br>pthread_rwlock_trywrlock()<br>pthread_rwlock_unlock()<br>读写锁的类型：<br>读锁-对内存做读操作<br>写锁-对内存做写操作</p><p>条件变量：<br>不是锁，但是条件变量能够阻塞线程<br>使用条件变量+互斥量<br>主要函数：<br>初始化一个条件变量pthread_cond_init()<br>销毁一个条件变量pthread_cond_destroy()<br>唤醒至少一个阻塞在条件变量上的线程pthread_cond_signal()<br>阻塞等待一个条件变量pthread_cond_wait()<br>限时等待一个条件变量pthread_cond_timedwait()</p><p>信号量：并行<br>头文件：semaphore.h<br>信号量类型：sem_t sem加强版的互斥锁<br>初始化信号量：sem_init()<br>0-线程同步<br>1-进程同步<br>value-最多有几个线程操作共享数据<br>销毁信号量：sem_destroy()<br>加锁：sem_wait()<br>尝试加锁：sem_trywait()<br>限时尝试加锁：sem_timedwait()<br>解锁：sem_post()</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;线程：&lt;br&gt;创建线程之后，地址空间没有变化&lt;br&gt;进程退出成了线程-主线程&lt;br&gt;创建出的子线程和主线程共用地址空间&lt;br&gt;主线程和子线程有各自独立的pcb&lt;br&gt;-子线程的pcb是从主线程拷贝来的&lt;br&gt;主线程与子线程共享：&lt;br&gt;.txt、.bss、.data、堆、动
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="C语言" scheme="http://yoursite.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>进程间通信IPC</title>
    <link href="http://yoursite.com/2018/11/27/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1IPC/"/>
    <id>http://yoursite.com/2018/11/27/进程间通信IPC/</id>
    <published>2018-11-27T12:08:00.000Z</published>
    <updated>2018-11-29T07:13:11.292Z</updated>
    
    <content type="html"><![CDATA[<p>进程的五种状态：<br>初始态、就绪态、运行态、挂起态、终止态</p><p>fork()创建子进程<br>父进程成功，fork()返回子进程的PID<br>子进程成功，fork()返回0<br>getpid() 获取进程ID<br>getppid()获取父进程ID<br>父子间进程不能通过全局变量共享内存，线程是可以的<br>exec函数族：需要注意的是exec并不是1个函数, 其实它只是一组函数的统称, 它包括下面6个函数<br>execl、 execlp、 execle、execv、 execvp、 execve<br>exec函数族重新替换.txt中的代码，执行exec中的代码</p><p>孤儿进程<br>爹先死，孩子还活着，孩子叫孤儿进程<br>孤儿被init进程领养，init进程变成孤儿进程的父亲<br>为了释放子进程占用的系统资源<br>进程结束之后，能够释放用户区空间<br>释放不了pcb，必须由父进程释放</p><p>僵尸进程<br>孩子死了，爹还活着，爹不去释放子进程的pcb，孩子就变成了僵尸进程<br>是一个死了的进程<br>回收进程：<br>wait() 阻塞函数<br>waitpid()<br>WIFEXITED(status);为非0进程正常结束<br>WEXITSTATUS(status) status为子进程退出状态<br>WIFSIGNALED(status);为非0进程异常终止<br>WTERMSIG(status) </p><p>进程间通信IPC<br>常用几种方式：<br>管道-简单<br>信号-系统开销小<br>信号量<br>消息队列<br>共享映射区-有无血缘关系的进程间通信都可以<br>本地套接字-稳定</p><p>匿名管道：pipe<br>本质：内核缓冲区、伪文件不占用磁盘空间<br>特点：<br>两部分：读端，写端对应两个文件描述符<br>数据写端流入，读端流出<br>操作管道的进程被销毁之后，管道自动被释放了<br>管道默认是阻塞的<br>使用场景：只能血缘关系进程间通信<br>管道的原理：<br>内部实现方式：队列 环形队列 fifo<br>缓冲区：默认4K<br>管道的局限性：<br>队列：数据只能读取一次，不能重复读取<br>半双工<br>设置读端为非阻塞：<br>int flags = fcntl(fd[0],F_GETFL);<br>flags |= O_NONBLOCK;<br>fcntl(fd[0],F_SETFL,flags);</p><p>有名管道：fifo<br>特点：在磁盘上有这样一个文件p<br>伪文件，在磁盘大小永远为0<br>在内核中有一个对应的缓冲区<br>半双工的通信方式<br>使用场景：无血缘关系进程间通信<br>创建方式：mkfifo 管道名</p><p>内存映射:mmap<br>mmap()建立内存映射区<br>munmap()释放内存映射区<br>匿名内存映射区(父子间进程通信)</p><p>信号：signal<br>特点：简单，携带的信息量少，使用在某个特定的场景中<br>信号的状态：<br>产生：键盘、命令kill、系统函数、定时器、段错误，除0错误<br>未决状态：没有被处理<br>递达：信号被处理了</p><p>信号处理：忽略、捕捉、执行默认动作<br>概念：阻塞信号集、未决信号集<br>相关函数：<br>kill() 发送信号给指定进程<br>raise()自己给自己发信号<br>abort()给自己发送给异常终止信号<br>闹钟(定时器)：<br>alarm()设置定时器(每个进程只有一个定时器)<br>settimer()定时器，并实现周期性定时<br>自定义信号集<br>sigemptyset()将set集合置空<br>sigfillset()将所有信号加入set集合<br>sigaddset()将signo信号加入到set集合<br>sigmember()判断信号是否存在<br>sigpending() 读取当前进程的未决信号集<br>sigprocmask()自定义信号集设置给内核阻塞信号集<br>signal()注册捕捉函数<br>sigaction()捕捉信号</p><p>守护进程：<br>一般步骤：<br>先fork,夫进程死，子进程执行创建会话操作<br>setsid()设置会话组<br>改变当前工作目录chdir<br>重设文件掩码umask(0)<br>关闭文件描述符0,1,2<br>执行核心工作</p><p>进程间同步：信号量、互斥锁、文件锁</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;进程的五种状态：&lt;br&gt;初始态、就绪态、运行态、挂起态、终止态&lt;/p&gt;
&lt;p&gt;fork()创建子进程&lt;br&gt;父进程成功，fork()返回子进程的PID&lt;br&gt;子进程成功，fork()返回0&lt;br&gt;getpid() 获取进程ID&lt;br&gt;getppid()获取父进程ID&lt;br&gt;
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="C语言" scheme="http://yoursite.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>内核最后阶段启动的三个进程</title>
    <link href="http://yoursite.com/2018/11/26/%E5%86%85%E6%A0%B8%E6%9C%80%E5%90%8E%E9%98%B6%E6%AE%B5%E5%90%AF%E5%8A%A8%E7%9A%84%E4%B8%89%E4%B8%AA%E8%BF%9B%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/11/26/内核最后阶段启动的三个进程/</id>
    <published>2018-11-26T13:40:00.000Z</published>
    <updated>2018-11-26T13:42:20.994Z</updated>
    
    <content type="html"><![CDATA[<p>在内核启动的最后阶段启动了三个进程<br>进程0：进程0其实就是刚才讲过的idle进程，叫空闲进程，也就是死循环。</p><p>进程1：kernel_init函数就是进程1，这个进程被称为init进程。</p><p>进程2：kthreadd函数就是进程2，这个进程是linux内核的守护进程。这个进程是用来保证linux内核自己本身能正常工作的。</p><p>在嵌入式操作系统中一般会指定/linuxrc为init进程。</p><p><a href="https://www.toutiao.com/a6621410454306554376/?tt_from=mobile_qq&amp;utm_campaign=client_share&amp;timestamp=1543239041&amp;app=news_article&amp;utm_source=mobile_qq&amp;iid=25942348816&amp;utm_medium=toutiao_android&amp;group_id=6621410454306554376" target="_blank" rel="noopener">参考</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在内核启动的最后阶段启动了三个进程&lt;br&gt;进程0：进程0其实就是刚才讲过的idle进程，叫空闲进程，也就是死循环。&lt;/p&gt;
&lt;p&gt;进程1：kernel_init函数就是进程1，这个进程被称为init进程。&lt;/p&gt;
&lt;p&gt;进程2：kthreadd函数就是进程2，这个进程是li
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="内核" scheme="http://yoursite.com/tags/%E5%86%85%E6%A0%B8/"/>
    
  </entry>
  
  <entry>
    <title>git操作</title>
    <link href="http://yoursite.com/2018/11/25/git%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2018/11/25/git操作/</id>
    <published>2018-11-25T02:53:00.000Z</published>
    <updated>2018-11-25T03:31:43.093Z</updated>
    
    <content type="html"><![CDATA[<p>git clone <url> 克隆远程版本库<br>git init 初始化Git仓库<br>设置git用户名／邮箱<br>git config user.name ‘github用户名’<br>git config user.email ‘邮箱’<br>git conf –list 查看配置(包含：用户名和邮箱等)</url></p><p>git status 查看了当前状态发现修改过的文件<br>git add . 添加到本地git缓存区</p><p>git reset HEAD file<br>可以把暂存区的修改撤销掉，重新放回工作区</p><p>git checkout –readme.txt这里有两种情况：<br>一种是还没有被放到暂存区，撤销修改就回到和版本库一模一样的状态<br>一种是添加到暂存区后，又作了修改，撤销修改就回到添加到暂存区后的状态</p><p>git commit -m “xxx” 推送修改到本地git库中<br>git commit –amend 撤销上一次提交到版本库的操作 并将暂存区重新提交到版本库中<br>git log 查看 commit日志<br>git reset –hard commit_id </p><p>提交代码：<br>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;<br>git pull origin master<br>取回远程主机某个分支的更新，再与本地的指定分支合并<br>git push &lt;远程主机名&gt; &lt;远程分支名&gt;<br>git push  origin master<br>把当前提交到git本地仓库的代码推送到远程主机的某个远程分之上</p><p>git branch 显示本地分支，在当前分支的前面用”*”标记<br>git branch -a查看所有分支列表，包括本地和远程<br>git branch <newbranch>创建新分支<br>git branch -d xxx 删除本地分支<br>git branch -D xxx 强制删除本地分支<br>git checkout xx 切换分支</newbranch></p><p>git merge xxx 合并指定分支到当前分支</p><p><a href="https://www.jianshu.com/p/cbd5cd504f14" target="_blank" rel="noopener">参考</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;git clone &lt;url&gt; 克隆远程版本库&lt;br&gt;git init 初始化Git仓库&lt;br&gt;设置git用户名／邮箱&lt;br&gt;git config user.name ‘github用户名’&lt;br&gt;git config user.email ‘邮箱’&lt;br&gt;git conf
      
    
    </summary>
    
      <category term="版本控制" scheme="http://yoursite.com/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="http://yoursite.com/2018/11/24/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/11/24/Linux常用命令/</id>
    <published>2018-11-24T13:25:00.000Z</published>
    <updated>2018-11-26T11:05:44.551Z</updated>
    
    <content type="html"><![CDATA[<p>chmod chown chgrp<br>chmod修改文件的权限<br>chown修改文件的所有者，例如：chown zhangsan:lisi filename<br>filename属于zhangsan用户lisi组<br>chgrp修改文件的所属组</p><p>查找和检索<br>文件属性查找：find<br>文件名：find / -name “搜索文件”<br>文件大小：find / -size +10M -size -100M(大于10M小于100M)<br>文件类型：find / -type d/f/b/c/s/p/l   f表示普通文件<br>文件内容查找：grep<br>格式：grep -r +“查找关键字”+路径<br>例如：grep -r “stdio.h” /home/aa<br>which命令在PATH路径中搜索<br>whereis命令用于搜索二进制文件，源代码，帮助文档<br>whereis -m只查看帮助文档<br>whereis -b只查找二进制文件<br>type用于查看命令类型<br>alias：别名<br>keyword：关键字<br>builtin：内置命令<br>file：外部命令<br>locate xx快速查找文件，从系统数据库进行查找</p><p>创建管道：mkfifo aa<br>time xx统计命令执行的时间</p><p>用户管理<br>添加用户：<br>adduser<br>useradd -s /bin/bash -g robin -d /home/robin/ -m robin<br>设置密码：passwd robin<br>添加用户组：groupadd robin<br>删除用户：<br>deluser<br>userdel -r robin  连家目录一起删除</p><p>umask掩码：<br>如果用户创建的是目录，则默认所有权限都开放，为777<br>如果创建的是文件，默认没有x权限，那么就只有r、w两项，最大值为666<br>新建文件：666-022=644<br>新建目录：777-022=755<br>ulimit -a 用来显示当前的各种用户进程限制<br>查看linux端口被哪个进程占用<br>lsof -i：端口号<br>netstat -tunlp | grep 端口号 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;chmod chown chgrp&lt;br&gt;chmod修改文件的权限&lt;br&gt;chown修改文件的所有者，例如：chown zhangsan:lisi filename&lt;br&gt;filename属于zhangsan用户lisi组&lt;br&gt;chgrp修改文件的所属组&lt;/p&gt;
&lt;p&gt;查
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="命令" scheme="http://yoursite.com/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>内核模块开发基础</title>
    <link href="http://yoursite.com/2018/11/23/%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%EF%BC%9A/"/>
    <id>http://yoursite.com/2018/11/23/内核模块开发基础：/</id>
    <published>2018-11-23T13:40:00.000Z</published>
    <updated>2018-11-26T13:43:39.276Z</updated>
    
    <content type="html"><![CDATA[<h4 id="模块开发常用的指令："><a href="#模块开发常用的指令：" class="headerlink" title="模块开发常用的指令："></a>模块开发常用的指令：</h4><p>insmod xx.ko插入模块<br>rmmod xx卸载模块<br>lsmod 列出显示所有模块<br>modprobe：(depmod)可载入指定的个别模块，或是载入一组相依赖的模块。<br>modinfo xx.ko 查看模块信息<br>tree -a 查看当前目录的整个树结构</p><h4 id="内核模块程序结构："><a href="#内核模块程序结构：" class="headerlink" title="内核模块程序结构："></a>内核模块程序结构：</h4><p>1) 模块加载函数(一般需要)    </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> __<span class="function">init <span class="title">xxx_init</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">module_init(xxx_init);</span><br></pre></td></tr></table></figure><p>2) 模块加载函数(一般需要)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> __<span class="function"><span class="built_in">exit</span> <span class="title">xxx_exit</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">module_exit(xxx_exit);</span><br></pre></td></tr></table></figure><p>3) 模块许可证声明(必须)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);<span class="comment">// 描述模块的许可证</span></span><br><span class="line">MODULE_AUTHOR(<span class="string">"johanangao"</span>);     <span class="comment">// 描述模块的作者</span></span><br><span class="line">MODULE_DESCRIPTION(<span class="string">"module test"</span>); <span class="comment">// 描述模块的介绍信息</span></span><br><span class="line">MODULE_ALIAS(<span class="string">"alias xxx"</span>);<span class="comment">// 描述模块的别名信息</span></span><br></pre></td></tr></table></figure><p>4) 模块参数(可选)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">module_param(bookName,charp,S_IRUGO);</span><br><span class="line"><span class="comment">//使用方法：insmod xx.ko bookName="TY6410"</span></span><br></pre></td></tr></table></figure><p>5) 模块导出符号(可选)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EXPORT_SYMBOL(符号名);</span><br><span class="line">EXPORT_GPL_SYMBOL(符号名);</span><br></pre></td></tr></table></figure><p>6) 模块信息(可选)</p><p>​     模块信息则是指模块的作者信息等(看第3条)</p><h4 id="模块的编译："><a href="#模块的编译：" class="headerlink" title="模块的编译："></a>模块的编译：</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ubuntu的内核源码树，如果要编译在ubuntu中安装的模块就打开这2个</span></span><br><span class="line"><span class="comment">#KERN_VER = $(shell uname -r)</span></span><br><span class="line"><span class="comment">#KERN_DIR = /lib/modules/$(KERN_VER)/build</span></span><br><span class="line"><span class="comment"># 开发板的linux内核的源码树目录</span></span><br><span class="line">KERN_DIR = /root/driver/kernel</span><br><span class="line">obj-m+= module_test.o</span><br><span class="line"><span class="section">all:</span></span><br><span class="line">make -C <span class="variable">$(KERN_DIR)</span> M=`pwd` modules </span><br><span class="line"><span class="section">cp:</span></span><br><span class="line">cp *.ko /root/porting_x210/rootfs/rootfs/driver_test</span><br><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: clean</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">make -C <span class="variable">$(KERN_DIR)</span> M=`pwd` modules clean</span><br></pre></td></tr></table></figure><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>内核模块主要由加载、卸载函数功能函数等一系列声明组成。它可以被传入参数，也可以导出符号，供其它的模块使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;模块开发常用的指令：&quot;&gt;&lt;a href=&quot;#模块开发常用的指令：&quot; class=&quot;headerlink&quot; title=&quot;模块开发常用的指令：&quot;&gt;&lt;/a&gt;模块开发常用的指令：&lt;/h4&gt;&lt;p&gt;insmod xx.ko插入模块&lt;br&gt;rmmod xx卸载模块&lt;br&gt;ls
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="内核" scheme="http://yoursite.com/tags/%E5%86%85%E6%A0%B8/"/>
    
  </entry>
  
  <entry>
    <title>vim操作</title>
    <link href="http://yoursite.com/2018/11/22/vim%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2018/11/22/vim操作/</id>
    <published>2018-11-22T02:53:00.000Z</published>
    <updated>2018-11-26T13:52:06.214Z</updated>
    
    <content type="html"><![CDATA[<h4 id="创建文件："><a href="#创建文件：" class="headerlink" title="创建文件："></a>创建文件：</h4><p>vim +n abc 光标定在n行<br>vim +/im   光标定在有im字符第一个出现处</p><h4 id="快捷键："><a href="#快捷键：" class="headerlink" title="快捷键："></a>快捷键：</h4><p>ctrl+a 光标移动到命令行首<br>ctrl+e 光标移动到命令行尾<br>ctrl+u 从光标所在位置删除到行首</p><h4 id="复制删除粘贴："><a href="#复制删除粘贴：" class="headerlink" title="复制删除粘贴："></a>复制删除粘贴：</h4><p>nyy 复制光标所在的n行<br>ndd 剪切光标所在的n行<br>p 在光标所在行下方粘贴<br>P 在光标所在行上方粘贴</p><h4 id="搜索："><a href="#搜索：" class="headerlink" title="搜索："></a>搜索：</h4><p>/xxx 从上往下搜索<br>?xxx 从下往上搜索<br>n 表示继续查找<br>N 反向查找</p><h4 id="分屏："><a href="#分屏：" class="headerlink" title="分屏："></a>分屏：</h4><p>sp filename 水平分屏<br>vsp filename 垂直分屏<br>wqall 保存所有文件并退出<br>ctrl+w+w 切换光标</p><h4 id="替换："><a href="#替换：" class="headerlink" title="替换："></a>替换：</h4><p>n,n/s/old/new/g 替换n行至n行old为new<br>%s/from/to/g 替换所有行的内容      </p><h4 id="其余："><a href="#其余：" class="headerlink" title="其余："></a>其余：</h4><p>vim中按大写K可以man手册<br>gg 首行<br>G  末行<br>0 行首<br>$ 行末<br>ctrl+r 恢复上一步被撤销的操作<br>u 撤销上一步<br>w 保存<br>w filename 另存为<br>q 退出<br>！强制</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;创建文件：&quot;&gt;&lt;a href=&quot;#创建文件：&quot; class=&quot;headerlink&quot; title=&quot;创建文件：&quot;&gt;&lt;/a&gt;创建文件：&lt;/h4&gt;&lt;p&gt;vim +n abc 光标定在n行&lt;br&gt;vim +/im   光标定在有im字符第一个出现处&lt;/p&gt;
&lt;h4 id
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="vim" scheme="http://yoursite.com/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>Makefile</title>
    <link href="http://yoursite.com/2018/11/21/Makefile/"/>
    <id>http://yoursite.com/2018/11/21/Makefile/</id>
    <published>2018-11-21T02:53:00.000Z</published>
    <updated>2018-11-26T13:53:25.977Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h4><ul><li><p>Makefile例子</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">obj = main.o add.o sub.o mul.o</span><br><span class="line">target = app</span><br><span class="line"><span class="comment">#makefile中自己维护的变量</span></span><br><span class="line">CC = gcc</span><br><span class="line">CFLAGS = -O0 -g -Wall</span><br><span class="line">LDFLAGS = -I -L</span><br><span class="line"><span class="variable">$(target)</span>:<span class="variable">$(obj)</span></span><br><span class="line"><span class="variable">$(CC)</span> <span class="variable">$^</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="section">%.o:%.c</span></span><br><span class="line"><span class="variable">$(CC)</span> -c <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line">.PHONY : clean </span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm <span class="variable">$(target)</span> <span class="variable">$(obj)</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>变量</p><p>$@：目标<br>$^：所有依赖<br>$&lt;：依赖列表中的第一个依赖<br>make -C ./BL1  进入./BL1目中make<br>make -C ./BL2 可实现makefile层次结构<br>-mkdir /aa 命令前面加上-，如果当前命令执行失败继续往下面执行</p></li><li><p>makefile中常用函数使用</p><p>#wildcard函数功能：找出当前目录下的所有.c文件<br>src=$(wildcard ./*.c)<br>#patsubst函数功能：将$(src)中所有.c文件替换成.o文件<br>obj=$(patsubst %.c, %.o, $(src))</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Makefile&quot;&gt;&lt;a href=&quot;#Makefile&quot; class=&quot;headerlink&quot; title=&quot;Makefile&quot;&gt;&lt;/a&gt;Makefile&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Makefile例子&lt;/p&gt;
&lt;figure class=&quot;highlig
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Makefile" scheme="http://yoursite.com/tags/Makefile/"/>
    
  </entry>
  
  <entry>
    <title>gcc编译器gdb调试器</title>
    <link href="http://yoursite.com/2018/11/20/gcc%E7%BC%96%E8%AF%91%E5%99%A8gdb%E8%B0%83%E8%AF%95%E5%99%A8/"/>
    <id>http://yoursite.com/2018/11/20/gcc编译器gdb调试器/</id>
    <published>2018-11-20T02:53:00.000Z</published>
    <updated>2018-11-26T13:54:54.562Z</updated>
    
    <content type="html"><![CDATA[<h4 id="gcc编译器"><a href="#gcc编译器" class="headerlink" title="gcc编译器"></a>gcc编译器</h4><ul><li><p>gcc参数：</p><p>-E 预处理生成.i文件<br>-S 编译生成汇编文件.s文件<br>-c 汇编器生成目标文件.o文件<br>-I 指定头文件路径<br>-L 指定库路径<br>-l 指定库，例如：-lm指定libm.so(math库)<br>-D gcc编译时添加宏<br>-O0 优化级别0不优化，最高优化级别是3(0~3)<br>-Wall 输出警告信息<br>-g gdb调试</p></li></ul><h4 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h4><ul><li><p>gdb参数：</p><p>l 列出源码,例如：l main.c:0 从0行开始列出main.c的内容<br>b 设置断点，例如：break 2或者b 2 在第2行设置断点<br>i info，例如：i b列所设置的断点<br>start 开始执行，停在第一执行语句<br>r 重新开始运行文件run<br>n 单步调试next，也可不进入函数体内部<br>c 执行到下一个断点停止continue<br>s 进入到函数体内部step<br>finish 从函数体内部跳出<br>p i查看变量的值print<br>ptype i查看变量的类型<br>display i追踪变量i<br>info display查看变量编号<br>undisplay n取消追踪变量<br>u 跳出本次循环<br>d n删除断点，info break获取断点编号<br>set var i=10 设置某个变量值为10<br>q 退出gdb(quit)</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;gcc编译器&quot;&gt;&lt;a href=&quot;#gcc编译器&quot; class=&quot;headerlink&quot; title=&quot;gcc编译器&quot;&gt;&lt;/a&gt;gcc编译器&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;gcc参数：&lt;/p&gt;
&lt;p&gt;-E 预处理生成.i文件&lt;br&gt;-S 编译生成汇编文件.s文件
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="gcc" scheme="http://yoursite.com/tags/gcc/"/>
    
  </entry>
  
  <entry>
    <title>静态库动态库制作</title>
    <link href="http://yoursite.com/2018/11/19/%E9%9D%99%E6%80%81%E5%BA%93%E5%8A%A8%E6%80%81%E5%BA%93%E5%88%B6%E4%BD%9C/"/>
    <id>http://yoursite.com/2018/11/19/静态库动态库制作/</id>
    <published>2018-11-19T02:53:00.000Z</published>
    <updated>2018-11-26T13:55:59.802Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-静态库制作"><a href="#1-静态库制作" class="headerlink" title="1.静态库制作"></a>1.静态库制作</h4><ol><li><p>命名规则：lib+库名+.a</p></li><li><p>制作步骤：</p><p>1)、生成.o文件</p><p>2)、将.o文件打包 ar rcs libxx.a xx.o<br>3)、分布和使用静态库：静态库和头文件 gcc main.c -I头文件路径 -L库路径 -l库名 -o xx</p></li><li><p>静态库的优缺点：</p><p>优点：分布程序的时候，不需要提供对应的库、加载库的速度快</p><p>缺点：库被打包到应用程序中，导致程序体积很大、库发生了改变，需要重新编译程序</p></li></ol><h4 id="2-动态库制作"><a href="#2-动态库制作" class="headerlink" title="2.动态库制作"></a>2.动态库制作</h4><ol><li><p>命名规则：lib+库名+.so</p></li><li><p>制作步骤：</p><p>1)、生成位置无关的.o文件 gcc -fPIC -c xx.c<br>2)、将.o文件打包 gcc -shared -o libxx.so xx.o<br>3)、分布和使用静态库：静态库和头文件 gcc main.c -I头文件路径 -L库路径 -l库名 -o xx</p></li><li><p>解决动态库不能链接问题：<br>vi /etc/ld.so.conf<br>sudo ldconfig -v</p></li><li><p>动态库的优缺点：<br>优点：执行程序体积小、动态库更新了，不需要重新编译程序，函数接口不变<br>缺点：发布程序的时候，需要将动态库提供给用户、动态库没有打包到应用程序中，加载速度相对较慢</p></li></ol><ul><li><p>nm命令列出目标文件的符号信息</p></li><li><p>ldd命令(list,dynamic,dependencies):列出动态库依赖关系</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-静态库制作&quot;&gt;&lt;a href=&quot;#1-静态库制作&quot; class=&quot;headerlink&quot; title=&quot;1.静态库制作&quot;&gt;&lt;/a&gt;1.静态库制作&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;命名规则：lib+库名+.a&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;制作步骤：&lt;/p&gt;
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="C语言" scheme="http://yoursite.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="http://yoursite.com/2018/07/16/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/07/16/单例模式/</id>
    <published>2018-07-16T00:49:47.875Z</published>
    <updated>2018-07-16T00:52:13.343Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SObject</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">static</span> SObject* c_instance;</span><br><span class="line">    </span><br><span class="line">    SObject(<span class="keyword">const</span> SObject&amp;);</span><br><span class="line">    SObject&amp; <span class="keyword">operator</span>= (<span class="keyword">const</span> SObject&amp;);</span><br><span class="line">    </span><br><span class="line">    SObject()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> SObject* <span class="title">GetInstance</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"this = "</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">SObject* SObject::c_instance = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">SObject* SObject::GetInstance()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>( c_instance == <span class="literal">NULL</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        c_instance = <span class="keyword">new</span> SObject();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> c_instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SObject* s = SObject::GetInstance();</span><br><span class="line">    SObject* s1 = SObject::GetInstance();</span><br><span class="line">    SObject* s2 = SObject::GetInstance();</span><br><span class="line">    </span><br><span class="line">    s-&gt;print();</span><br><span class="line">    s1-&gt;print();</span><br><span class="line">    s2-&gt;print();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>new关键字与命名空间</title>
    <link href="http://yoursite.com/2018/06/20/new%E5%85%B3%E9%94%AE%E5%AD%97%E4%B8%8E%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/"/>
    <id>http://yoursite.com/2018/06/20/new关键字与命名空间/</id>
    <published>2018-06-20T12:03:21.575Z</published>
    <updated>2018-06-20T08:12:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="new关键字的初始化"><a href="#new关键字的初始化" class="headerlink" title="new关键字的初始化"></a>new关键字的初始化</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>* pi = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">1</span>);            <span class="comment">//并初始化</span></span><br><span class="line"><span class="keyword">int</span>* a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;  <span class="comment">//数组申请并初始化</span></span><br></pre></td></tr></table></figure><h2 id="C-命名空间的使用"><a href="#C-命名空间的使用" class="headerlink" title="C++命名空间的使用"></a>C++命名空间的使用</h2><p>-使用整个命名空间：using namespace name；</p><p>-使用命名空间中的变量：using name::variable;</p><p>-使用默认命名空间中的变量: ::variable</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> First</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> Second</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">namespace</span> Internal</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">P</span></span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            <span class="keyword">int</span> y;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> First;</span><br><span class="line">    <span class="keyword">using</span> Second::Internal::P;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"First::i = %d\n"</span>, i);            <span class="comment">// 0</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Second::i = %d\n"</span>, Second::i);   <span class="comment">// 1</span></span><br><span class="line">    P p = &#123;<span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"p.x = %d\n"</span>, p.x);              <span class="comment">//  2</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"p.y = %d\n"</span>, p.y);              <span class="comment">//  3</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;new关键字的初始化&quot;&gt;&lt;a href=&quot;#new关键字的初始化&quot; class=&quot;headerlink&quot; title=&quot;new关键字的初始化&quot;&gt;&lt;/a&gt;new关键字的初始化&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>C++标准库string类型</title>
    <link href="http://yoursite.com/2018/06/19/C++%E6%A0%87%E5%87%86%E5%BA%93string%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2018/06/19/C++标准库string类型/</id>
    <published>2018-06-19T11:30:24.105Z</published>
    <updated>2018-06-19T11:30:59.850Z</updated>
    
    <content type="html"><![CDATA[<h2 id="C-标准库提供了string类型"><a href="#C-标准库提供了string类型" class="headerlink" title="C++标准库提供了string类型"></a>C++标准库提供了string类型</h2><p>-string直接支持字符串连接</p><p>-string直接支持字符串的大小比较</p><p>-string直接支持子串查找和提取</p><p>-string直接支持字符串的插入和替换</p><h2 id="字符串和数字的转换"><a href="#字符串和数字的转换" class="headerlink" title="字符串和数字的转换"></a>字符串和数字的转换</h2><p>-标准库中提供了相关的类对字符串和数字进行转换</p><p>-字符串流类（sstream）用于string的转换</p><ul><li><p><sstream>-相关头文件</sstream></p></li><li><p>istringstream-字符串输入流</p></li><li><p>ostringstream-字符串输出流</p><p>使用方法：</p><p>-string—–&gt;数字</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">istringstream</span> <span class="title">iss</span><span class="params">(<span class="string">"123.45"</span>)</span></span>;</span><br><span class="line"><span class="keyword">double</span> num;</span><br><span class="line">iss&gt;&gt;num;</span><br></pre></td></tr></table></figure><p>-数字—–&gt;string</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ostringstream</span> oss;</span><br><span class="line">oss&lt;&lt;<span class="number">543.21</span>;</span><br><span class="line"><span class="built_in">string</span> s=oss.str();</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;C-标准库提供了string类型&quot;&gt;&lt;a href=&quot;#C-标准库提供了string类型&quot; class=&quot;headerlink&quot; title=&quot;C++标准库提供了string类型&quot;&gt;&lt;/a&gt;C++标准库提供了string类型&lt;/h2&gt;&lt;p&gt;-string直接支持字
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>C++标准库</title>
    <link href="http://yoursite.com/2018/06/19/C++%E6%A0%87%E5%87%86%E5%BA%93/"/>
    <id>http://yoursite.com/2018/06/19/C++标准库/</id>
    <published>2018-06-19T11:26:00.323Z</published>
    <updated>2018-06-19T11:28:52.078Z</updated>
    
    <content type="html"><![CDATA[<h2 id="C-标准库"><a href="#C-标准库" class="headerlink" title="C++标准库"></a>C++标准库</h2><p>C++标准库并不是C++语言的一部分</p><p>C++标准库是由类库和函数库组成的集合</p><p>C++标准库中定义的类和对象都位于std命名空间中</p><p>C++标准库的头文件都不带.h后缀</p><p>C++标准库涵盖了C库的功能</p><h2 id="C-标准库预定义了多数常用的数据结构"><a href="#C-标准库预定义了多数常用的数据结构" class="headerlink" title="C++标准库预定义了多数常用的数据结构"></a>C++标准库预定义了多数常用的数据结构</h2><p>bitset    set    cstdio</p><p>deque    stack    cstring</p><p>list    vector    cstdlib</p><p>queue    map    cmath</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;C-标准库&quot;&gt;&lt;a href=&quot;#C-标准库&quot; class=&quot;headerlink&quot; title=&quot;C++标准库&quot;&gt;&lt;/a&gt;C++标准库&lt;/h2&gt;&lt;p&gt;C++标准库并不是C++语言的一部分&lt;/p&gt;
&lt;p&gt;C++标准库是由类库和函数库组成的集合&lt;/p&gt;
&lt;p&gt;C++
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>二阶构造函数</title>
    <link href="http://yoursite.com/2018/06/19/%E4%BA%8C%E9%98%B6%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2018/06/19/二阶构造函数/</id>
    <published>2018-06-19T11:15:35.527Z</published>
    <updated>2018-06-19T11:18:14.984Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工程开发中的构造过程可分为"><a href="#工程开发中的构造过程可分为" class="headerlink" title="工程开发中的构造过程可分为"></a>工程开发中的构造过程可分为</h2><ul><li><p>资源无关的初始化操作：不可能出现异常情况的操作</p></li><li><p>需要使用系统资源的操作：可能出现异常情况，如：内存申请，访问文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoPhaseCons</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">TwoPhaseCons()&#123;   <span class="comment">//第一阶段构造函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">construct</span><span class="params">()</span></span>&#123; <span class="comment">//第二阶段构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">static</span> TwoPhaseCons* <span class="title">newInstance</span><span class="params">()</span></span>; <span class="comment">//创建对象函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>完整实例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntArray</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_length;</span><br><span class="line">    <span class="keyword">int</span>* m_pointer;</span><br><span class="line">    </span><br><span class="line">    IntArray(<span class="keyword">int</span> len)&#123;</span><br><span class="line">m_length = len;    <span class="comment">//第一阶构造：资源无关初始化</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">construct</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">bool</span> ret = <span class="literal">true</span>;</span><br><span class="line">m_pointer = <span class="keyword">new</span> <span class="keyword">int</span>[m_length];   <span class="comment">//第二阶构造：申请系统资源</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( m_pointer )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m_length; i++)</span><br><span class="line">&#123;</span><br><span class="line">m_pointer[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ret = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> IntArray* <span class="title">NewInstance</span><span class="params">(<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">IntArray* ret = <span class="keyword">new</span> IntArray(length);</span><br><span class="line"><span class="keyword">if</span>( !(ret &amp;&amp; ret-&gt;construct()) ) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> ret;</span><br><span class="line">ret = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_length;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span>&amp; value)</span></span>&#123;</span><br><span class="line"><span class="keyword">bool</span> ret = (<span class="number">0</span> &lt;= index) &amp;&amp; (index &lt; length());</span><br><span class="line"><span class="keyword">if</span>( ret )</span><br><span class="line">&#123;</span><br><span class="line">value = m_pointer[index];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index ,<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line"><span class="keyword">bool</span> ret = (<span class="number">0</span> &lt;= index) &amp;&amp; (index &lt; length());</span><br><span class="line"><span class="keyword">if</span>( ret )</span><br><span class="line">&#123;</span><br><span class="line">m_pointer[index] = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">    ~IntArray()&#123;</span><br><span class="line"><span class="keyword">delete</span>[]m_pointer;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IntArray* a = IntArray::NewInstance(<span class="number">5</span>);    </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a.length = %d\n"</span>, a-&gt;length());</span><br><span class="line">    </span><br><span class="line">    a-&gt;<span class="built_in">set</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;a-&gt;length(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        a-&gt;get(i, v);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"a[%d] = %d\n"</span>, i, v);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">delete</span> a;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;工程开发中的构造过程可分为&quot;&gt;&lt;a href=&quot;#工程开发中的构造过程可分为&quot; class=&quot;headerlink&quot; title=&quot;工程开发中的构造过程可分为&quot;&gt;&lt;/a&gt;工程开发中的构造过程可分为&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;资源无关的初始化操作：不可能出现异
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>回调函数</title>
    <link href="http://yoursite.com/2018/06/13/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2018/06/13/回调函数/</id>
    <published>2018-06-13T14:02:54.043Z</published>
    <updated>2018-06-18T13:57:12.828Z</updated>
    
    <content type="html"><![CDATA[<p>​    回调函数就是一个通过函数指针调用的函数。如果你把函数的指针（地址）作为参数传递给另一个函数，当这个指针被用来调用其所指向的函数时，我们就说这是回调函数。回调函数不是由该函数的实现方直接调用，而是在特定的事件或条件发生时由另外的一方调用的，用于对该事件或条件进行响应。 </p><p>回调函数是利用函数指正实现的一种调用机制</p><h2 id="回调机制原理"><a href="#回调机制原理" class="headerlink" title="回调机制原理"></a>回调机制原理</h2><p>​    调用者不知道具体时间发生时需要调用的具体函数</p><p>​    被调函数不知道何时被调用，只知道需要完成的任务</p><p>​    当具体时间发生时，调用者通过函数指针调用具体函数，回调机制中的调用者和被调函互不依赖    </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(*Weapon)</span><span class="params">(<span class="keyword">int</span>)</span></span>;  <span class="comment">//重定义函数指针类型</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fight</span><span class="params">(Weapon wp, <span class="keyword">int</span> arg)</span> <span class="comment">//回调函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Fight boss!\n"</span>);</span><br><span class="line">    </span><br><span class="line">    result = wp(arg);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Boss loss: %d\n"</span>, result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">knife</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Knife attack: %d\n"</span>, <span class="number">1</span>);</span><br><span class="line">        ret++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sword</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Sword attack: %d\n"</span>, <span class="number">5</span>);</span><br><span class="line">        ret += <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gun</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Gun attack: %d\n"</span>, <span class="number">10</span>);</span><br><span class="line">        ret += <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fight(knife, <span class="number">3</span>);  <span class="comment">//使用回调函数</span></span><br><span class="line">    fight(sword, <span class="number">4</span>);</span><br><span class="line">    fight(gun, <span class="number">5</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    回调函数就是一个通过函数指针调用的函数。如果你把函数的指针（地址）作为参数传递给另一个函数，当这个指针被用来调用其所指向的函数时，我们就说这是回调函数。回调函数不是由该函数的实现方直接调用，而是在特定的事件或条件发生时由另外的一方调用的，用于对该事件或条件进行响应
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>C语言中的柔性数组</title>
    <link href="http://yoursite.com/2018/06/13/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E6%9F%94%E6%80%A7%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2018/06/13/C语言中的柔性数组/</id>
    <published>2018-06-13T12:55:35.536Z</published>
    <updated>2018-06-18T13:57:49.753Z</updated>
    
    <content type="html"><![CDATA[<p>柔性数组即数组大小待定的数组，应用在了变长结构体中 </p><p>C语言中可以由结构体产生柔性数组</p><p>C语言中结构体的最后一个元素可以是大小未知的数组</p><p>用法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SoftArray</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">array</span>[];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//....</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SoftArray</span> *<span class="title">sa</span>=<span class="title">NULL</span>;</span></span><br><span class="line">sa=(struct SoftArray*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct SoftArray)+<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*<span class="number">5</span>);</span><br><span class="line">sa-&gt;len=<span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>sizeof(struct SoftArray)=4</p><p>struct SoftArray中的array仅是一个待使用的标示符，不占用存储空间</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;柔性数组即数组大小待定的数组，应用在了变长结构体中 &lt;/p&gt;
&lt;p&gt;C语言中可以由结构体产生柔性数组&lt;/p&gt;
&lt;p&gt;C语言中结构体的最后一个元素可以是大小未知的数组&lt;/p&gt;
&lt;p&gt;用法：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>C++中的拷贝构造函数</title>
    <link href="http://yoursite.com/2018/06/13/C++%E4%B8%AD%E7%9A%84%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2018/06/13/C++中的拷贝构造函数/</id>
    <published>2018-06-13T12:51:50.544Z</published>
    <updated>2018-06-13T06:33:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="拷贝构造函数的意义"><a href="#拷贝构造函数的意义" class="headerlink" title="拷贝构造函数的意义"></a>拷贝构造函数的意义</h2><p>​    浅拷贝：拷贝后对象物理状态相同</p><p>​    深拷贝：拷贝后对象的逻辑状态相同</p><p>编译器提供的拷贝构造函数只进行浅拷贝</p><h2 id="什么时候需要进行深拷贝？"><a href="#什么时候需要进行深拷贝？" class="headerlink" title="什么时候需要进行深拷贝？"></a>什么时候需要进行深拷贝？</h2><p>对象有成员指代了系统中的资源</p><p>​    成员指向了动态内存空间</p><p>​    成员打开了外存中的文件</p><p>​    成员使用了系统中的网络端口</p><p>​    。。。。。。。</p><h2 id="一般性原则"><a href="#一般性原则" class="headerlink" title="一般性原则"></a>一般性原则</h2><p>自定义拷贝构造函数，必然需要实现深拷贝</p><p>当类中存在数据成员需要动态开辟内存空间的时候，需要使用深拷贝的方式</p><p>区别：在某些状况下，类内成员变量需要动态开辟堆内存，如果实行位拷贝【位拷贝拷贝的是地址（也叫浅拷贝），而值拷贝则拷贝的是内容（深拷贝） 】，也就是把对象里的值完全复制给另一个对象，如A=B。这时，如果B中有一个成员变量指针已经申请了内存，那A中的那个成员变量也指向同一块内存。这就出现了问题：当B把内存释放了（如：析构），这时A内的指针就是野指针了，出现运行错误。</p><p>​    深拷贝和浅拷贝可以简单理解为：如果一个类拥有资源，当这个类的对象发生复制过程的时候，资源重新分配，这个过程就是深拷贝，反之，没有重新分配资源，就是浅拷贝。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;拷贝构造函数的意义&quot;&gt;&lt;a href=&quot;#拷贝构造函数的意义&quot; class=&quot;headerlink&quot; title=&quot;拷贝构造函数的意义&quot;&gt;&lt;/a&gt;拷贝构造函数的意义&lt;/h2&gt;&lt;p&gt;​    浅拷贝：拷贝后对象物理状态相同&lt;/p&gt;
&lt;p&gt;​    深拷贝：拷贝后对象
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>C++强制类型转换</title>
    <link href="http://yoursite.com/2018/06/11/C++%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <id>http://yoursite.com/2018/06/11/C++强制类型转换/</id>
    <published>2018-06-11T12:34:58.430Z</published>
    <updated>2018-06-11T12:33:51.776Z</updated>
    
    <content type="html"><![CDATA[<p>C++将强制类型转换分为4种不同的类型：</p><ul><li>static_cast</li><li>const_cast</li><li>dynamic_cast</li><li>reinterpret_cast      </li></ul><p>用法：xxx_cast<type>(Expression) </type></p><h2 id="static-cast强制类型转换"><a href="#static-cast强制类型转换" class="headerlink" title="static_cast强制类型转换"></a>static_cast强制类型转换</h2><p>用于基本类型间的转换</p><p>不能用于基本类型指针间的转换</p><p>用于有继承关系类对象之间的转换和类指针之间的转换</p><h2 id="const-cast-强制类型转换"><a href="#const-cast-强制类型转换" class="headerlink" title="const_cast 强制类型转换"></a>const_cast 强制类型转换</h2><p>用于去除变量的只读属性 </p><p>强制转换的目标类型必须是指针或引用    </p><h2 id="reinterpret-cast强制类型转换"><a href="#reinterpret-cast强制类型转换" class="headerlink" title="reinterpret_cast强制类型转换"></a>reinterpret_cast强制类型转换</h2><p>用于指针类型间的强制转换</p><p>用于整数和指针类型间的强制转换</p><h2 id="dynamic-cast强制类型转换"><a href="#dynamic-cast强制类型转换" class="headerlink" title="dynamic_cast强制类型转换"></a>dynamic_cast强制类型转换</h2><p>用于有继承关系的类指针间的转换</p><p>用于有交叉关系的类指针间的转换</p><p>具有类型检查的功能</p><p>需要虚函数的支持</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;C++将强制类型转换分为4种不同的类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;static_cast&lt;/li&gt;
&lt;li&gt;const_cast&lt;/li&gt;
&lt;li&gt;dynamic_cast&lt;/li&gt;
&lt;li&gt;reinterpret_cast      &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用法：
      
    
    </summary>
    
    
  </entry>
  
</feed>
