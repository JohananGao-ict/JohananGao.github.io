<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>菜鸟记录</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-21T09:08:34.909Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Johanan Gao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>gcc编译器gdb调试器</title>
    <link href="http://yoursite.com/2018/11/21/gcc%E7%BC%96%E8%AF%91%E5%99%A8gdb%E8%B0%83%E8%AF%95%E5%99%A8/"/>
    <id>http://yoursite.com/2018/11/21/gcc编译器gdb调试器/</id>
    <published>2018-11-21T09:07:31.837Z</published>
    <updated>2018-11-21T09:08:34.909Z</updated>
    
    <content type="html"><![CDATA[<h4 id="gcc编译器"><a href="#gcc编译器" class="headerlink" title="gcc编译器"></a>gcc编译器</h4><ul><li><p>gcc参数：</p><p>-E 预处理生成.i文件<br>-S 编译生成汇编文件.s文件<br>-c 汇编器生成目标文件.o文件<br>-I 指定头文件路径<br>-L 指定库路径<br>-l 指定库，例如：-lm指定libm.so(math库)<br>-D gcc编译时添加宏<br>-O0 优化级别0不优化，最高优化级别是3(0~3)<br>-Wall 输出警告信息<br>-g gdb调试</p></li></ul><h4 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h4><ul><li><p>gdb参数：</p><p>l 列出源码,例如：l main.c:0 从0行开始列出main.c的内容<br>b 设置断点，例如：break 2或者b 2 在第2行设置断点<br>i info，例如：i b列所设置的断点<br>start 开始执行，停在第一执行语句<br>r 重新开始运行文件run<br>n 单步调试next，也可不进入函数体内部<br>c 执行到下一个断点停止continue<br>s 进入到函数体内部step<br>finish 从函数体内部跳出<br>p i查看变量的值print<br>ptype i查看变量的类型<br>display i追踪变量i<br>info display查看变量编号<br>undisplay n取消追踪变量<br>u 跳出本次循环<br>d n删除断点，info break获取断点编号<br>set var i=10 设置某个变量值为10<br>q 退出gdb(quit)</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;gcc编译器&quot;&gt;&lt;a href=&quot;#gcc编译器&quot; class=&quot;headerlink&quot; title=&quot;gcc编译器&quot;&gt;&lt;/a&gt;gcc编译器&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;gcc参数：&lt;/p&gt;
&lt;p&gt;-E 预处理生成.i文件&lt;br&gt;-S 编译生成汇编文件.s文件
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>静态库动态库制作</title>
    <link href="http://yoursite.com/2018/11/21/%E9%9D%99%E6%80%81%E5%BA%93%E5%8A%A8%E6%80%81%E5%BA%93%E5%88%B6%E4%BD%9C/"/>
    <id>http://yoursite.com/2018/11/21/静态库动态库制作/</id>
    <published>2018-11-21T04:29:04.646Z</published>
    <updated>2018-11-21T04:41:11.646Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-静态库制作"><a href="#1-静态库制作" class="headerlink" title="1.静态库制作"></a>1.静态库制作</h4><ol><li><p>命名规则：lib+库名+.a</p></li><li><p>制作步骤：</p><p>1)、生成.o文件</p><p>2)、将.o文件打包 ar rcs libxx.a xx.o<br>3)、分布和使用静态库：静态库和头文件 gcc main.c -I头文件路径 -L库路径 -l库名 -o xx</p></li><li><p>静态库的优缺点：</p><p>优点：分布程序的时候，不需要提供对应的库、加载库的速度快</p><p>缺点：库被打包到应用程序中，导致程序体积很大、库发生了改变，需要重新编译程序</p></li></ol><h4 id="2-动态库制作"><a href="#2-动态库制作" class="headerlink" title="2.动态库制作"></a>2.动态库制作</h4><ol><li><p>命名规则：lib+库名+.so</p></li><li><p>制作步骤：</p><p>1)、生成位置无关的.o文件 gcc -fPIC -c <em>.c<br>2)、将.o文件打包 gcc -shared -o libxx.so </em>.o<br>3)、分布和使用静态库：静态库和头文件 gcc main.c -I头文件路径 -L库路径 -l库名 -o xx</p></li><li><p>解决动态库不能链接问题：<br>vi /etc/ld.so.conf<br>sudo ldconfig -v</p></li><li><p>动态库的优缺点：<br>优点：执行程序体积小、动态库更新了，不需要重新编译程序，函数接口不变<br>缺点：发布程序的时候，需要将动态库提供给用户、动态库没有打包到应用程序中，加载速度相对较慢</p></li></ol><ul><li><p>nm命令列出目标文件的符号信息</p></li><li><p>ldd命令(list,dynamic,dependencies):列出动态库依赖关系</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-静态库制作&quot;&gt;&lt;a href=&quot;#1-静态库制作&quot; class=&quot;headerlink&quot; title=&quot;1.静态库制作&quot;&gt;&lt;/a&gt;1.静态库制作&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;命名规则：lib+库名+.a&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;制作步骤：&lt;/p&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="http://yoursite.com/2018/07/16/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/07/16/单例模式/</id>
    <published>2018-07-16T00:49:47.875Z</published>
    <updated>2018-07-16T00:52:13.343Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SObject</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">static</span> SObject* c_instance;</span><br><span class="line">    </span><br><span class="line">    SObject(<span class="keyword">const</span> SObject&amp;);</span><br><span class="line">    SObject&amp; <span class="keyword">operator</span>= (<span class="keyword">const</span> SObject&amp;);</span><br><span class="line">    </span><br><span class="line">    SObject()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> SObject* <span class="title">GetInstance</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"this = "</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">SObject* SObject::c_instance = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">SObject* SObject::GetInstance()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>( c_instance == <span class="literal">NULL</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        c_instance = <span class="keyword">new</span> SObject();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> c_instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SObject* s = SObject::GetInstance();</span><br><span class="line">    SObject* s1 = SObject::GetInstance();</span><br><span class="line">    SObject* s2 = SObject::GetInstance();</span><br><span class="line">    </span><br><span class="line">    s-&gt;print();</span><br><span class="line">    s1-&gt;print();</span><br><span class="line">    s2-&gt;print();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>new关键字与命名空间</title>
    <link href="http://yoursite.com/2018/06/20/new%E5%85%B3%E9%94%AE%E5%AD%97%E4%B8%8E%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/"/>
    <id>http://yoursite.com/2018/06/20/new关键字与命名空间/</id>
    <published>2018-06-20T12:03:21.575Z</published>
    <updated>2018-06-20T08:12:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="new关键字的初始化"><a href="#new关键字的初始化" class="headerlink" title="new关键字的初始化"></a>new关键字的初始化</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>* pi = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">1</span>);            <span class="comment">//并初始化</span></span><br><span class="line"><span class="keyword">int</span>* a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;  <span class="comment">//数组申请并初始化</span></span><br></pre></td></tr></table></figure><h2 id="C-命名空间的使用"><a href="#C-命名空间的使用" class="headerlink" title="C++命名空间的使用"></a>C++命名空间的使用</h2><p>-使用整个命名空间：using namespace name；</p><p>-使用命名空间中的变量：using name::variable;</p><p>-使用默认命名空间中的变量: ::variable</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> First</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> Second</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">namespace</span> Internal</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">P</span></span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            <span class="keyword">int</span> y;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> First;</span><br><span class="line">    <span class="keyword">using</span> Second::Internal::P;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"First::i = %d\n"</span>, i);            <span class="comment">// 0</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Second::i = %d\n"</span>, Second::i);   <span class="comment">// 1</span></span><br><span class="line">    P p = &#123;<span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"p.x = %d\n"</span>, p.x);              <span class="comment">//  2</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"p.y = %d\n"</span>, p.y);              <span class="comment">//  3</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;new关键字的初始化&quot;&gt;&lt;a href=&quot;#new关键字的初始化&quot; class=&quot;headerlink&quot; title=&quot;new关键字的初始化&quot;&gt;&lt;/a&gt;new关键字的初始化&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>C++标准库string类型</title>
    <link href="http://yoursite.com/2018/06/19/C++%E6%A0%87%E5%87%86%E5%BA%93string%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2018/06/19/C++标准库string类型/</id>
    <published>2018-06-19T11:30:24.105Z</published>
    <updated>2018-06-19T11:30:59.850Z</updated>
    
    <content type="html"><![CDATA[<h2 id="C-标准库提供了string类型"><a href="#C-标准库提供了string类型" class="headerlink" title="C++标准库提供了string类型"></a>C++标准库提供了string类型</h2><p>-string直接支持字符串连接</p><p>-string直接支持字符串的大小比较</p><p>-string直接支持子串查找和提取</p><p>-string直接支持字符串的插入和替换</p><h2 id="字符串和数字的转换"><a href="#字符串和数字的转换" class="headerlink" title="字符串和数字的转换"></a>字符串和数字的转换</h2><p>-标准库中提供了相关的类对字符串和数字进行转换</p><p>-字符串流类（sstream）用于string的转换</p><ul><li><p><sstream>-相关头文件</sstream></p></li><li><p>istringstream-字符串输入流</p></li><li><p>ostringstream-字符串输出流</p><p>使用方法：</p><p>-string—–&gt;数字</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">istringstream</span> <span class="title">iss</span><span class="params">(<span class="string">"123.45"</span>)</span></span>;</span><br><span class="line"><span class="keyword">double</span> num;</span><br><span class="line">iss&gt;&gt;num;</span><br></pre></td></tr></table></figure><p>-数字—–&gt;string</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ostringstream</span> oss;</span><br><span class="line">oss&lt;&lt;<span class="number">543.21</span>;</span><br><span class="line"><span class="built_in">string</span> s=oss.str();</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;C-标准库提供了string类型&quot;&gt;&lt;a href=&quot;#C-标准库提供了string类型&quot; class=&quot;headerlink&quot; title=&quot;C++标准库提供了string类型&quot;&gt;&lt;/a&gt;C++标准库提供了string类型&lt;/h2&gt;&lt;p&gt;-string直接支持字
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>C++标准库</title>
    <link href="http://yoursite.com/2018/06/19/C++%E6%A0%87%E5%87%86%E5%BA%93/"/>
    <id>http://yoursite.com/2018/06/19/C++标准库/</id>
    <published>2018-06-19T11:26:00.323Z</published>
    <updated>2018-06-19T11:28:52.078Z</updated>
    
    <content type="html"><![CDATA[<h2 id="C-标准库"><a href="#C-标准库" class="headerlink" title="C++标准库"></a>C++标准库</h2><p>C++标准库并不是C++语言的一部分</p><p>C++标准库是由类库和函数库组成的集合</p><p>C++标准库中定义的类和对象都位于std命名空间中</p><p>C++标准库的头文件都不带.h后缀</p><p>C++标准库涵盖了C库的功能</p><h2 id="C-标准库预定义了多数常用的数据结构"><a href="#C-标准库预定义了多数常用的数据结构" class="headerlink" title="C++标准库预定义了多数常用的数据结构"></a>C++标准库预定义了多数常用的数据结构</h2><p>bitset    set    cstdio</p><p>deque    stack    cstring</p><p>list    vector    cstdlib</p><p>queue    map    cmath</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;C-标准库&quot;&gt;&lt;a href=&quot;#C-标准库&quot; class=&quot;headerlink&quot; title=&quot;C++标准库&quot;&gt;&lt;/a&gt;C++标准库&lt;/h2&gt;&lt;p&gt;C++标准库并不是C++语言的一部分&lt;/p&gt;
&lt;p&gt;C++标准库是由类库和函数库组成的集合&lt;/p&gt;
&lt;p&gt;C++
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>二阶构造函数</title>
    <link href="http://yoursite.com/2018/06/19/%E4%BA%8C%E9%98%B6%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2018/06/19/二阶构造函数/</id>
    <published>2018-06-19T11:15:35.527Z</published>
    <updated>2018-06-19T11:18:14.984Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工程开发中的构造过程可分为"><a href="#工程开发中的构造过程可分为" class="headerlink" title="工程开发中的构造过程可分为"></a>工程开发中的构造过程可分为</h2><ul><li><p>资源无关的初始化操作：不可能出现异常情况的操作</p></li><li><p>需要使用系统资源的操作：可能出现异常情况，如：内存申请，访问文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoPhaseCons</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">TwoPhaseCons()&#123;   <span class="comment">//第一阶段构造函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">construct</span><span class="params">()</span></span>&#123; <span class="comment">//第二阶段构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">static</span> TwoPhaseCons* <span class="title">newInstance</span><span class="params">()</span></span>; <span class="comment">//创建对象函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>完整实例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntArray</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_length;</span><br><span class="line">    <span class="keyword">int</span>* m_pointer;</span><br><span class="line">    </span><br><span class="line">    IntArray(<span class="keyword">int</span> len)&#123;</span><br><span class="line">m_length = len;    <span class="comment">//第一阶构造：资源无关初始化</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">construct</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">bool</span> ret = <span class="literal">true</span>;</span><br><span class="line">m_pointer = <span class="keyword">new</span> <span class="keyword">int</span>[m_length];   <span class="comment">//第二阶构造：申请系统资源</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( m_pointer )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m_length; i++)</span><br><span class="line">&#123;</span><br><span class="line">m_pointer[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ret = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> IntArray* <span class="title">NewInstance</span><span class="params">(<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">IntArray* ret = <span class="keyword">new</span> IntArray(length);</span><br><span class="line"><span class="keyword">if</span>( !(ret &amp;&amp; ret-&gt;construct()) ) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> ret;</span><br><span class="line">ret = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_length;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span>&amp; value)</span></span>&#123;</span><br><span class="line"><span class="keyword">bool</span> ret = (<span class="number">0</span> &lt;= index) &amp;&amp; (index &lt; length());</span><br><span class="line"><span class="keyword">if</span>( ret )</span><br><span class="line">&#123;</span><br><span class="line">value = m_pointer[index];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index ,<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line"><span class="keyword">bool</span> ret = (<span class="number">0</span> &lt;= index) &amp;&amp; (index &lt; length());</span><br><span class="line"><span class="keyword">if</span>( ret )</span><br><span class="line">&#123;</span><br><span class="line">m_pointer[index] = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">    ~IntArray()&#123;</span><br><span class="line"><span class="keyword">delete</span>[]m_pointer;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IntArray* a = IntArray::NewInstance(<span class="number">5</span>);    </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a.length = %d\n"</span>, a-&gt;length());</span><br><span class="line">    </span><br><span class="line">    a-&gt;<span class="built_in">set</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;a-&gt;length(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        a-&gt;get(i, v);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"a[%d] = %d\n"</span>, i, v);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">delete</span> a;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;工程开发中的构造过程可分为&quot;&gt;&lt;a href=&quot;#工程开发中的构造过程可分为&quot; class=&quot;headerlink&quot; title=&quot;工程开发中的构造过程可分为&quot;&gt;&lt;/a&gt;工程开发中的构造过程可分为&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;资源无关的初始化操作：不可能出现异
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>回调函数</title>
    <link href="http://yoursite.com/2018/06/13/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2018/06/13/回调函数/</id>
    <published>2018-06-13T14:02:54.043Z</published>
    <updated>2018-06-18T13:57:12.828Z</updated>
    
    <content type="html"><![CDATA[<p>​    回调函数就是一个通过函数指针调用的函数。如果你把函数的指针（地址）作为参数传递给另一个函数，当这个指针被用来调用其所指向的函数时，我们就说这是回调函数。回调函数不是由该函数的实现方直接调用，而是在特定的事件或条件发生时由另外的一方调用的，用于对该事件或条件进行响应。 </p><p>回调函数是利用函数指正实现的一种调用机制</p><h2 id="回调机制原理"><a href="#回调机制原理" class="headerlink" title="回调机制原理"></a>回调机制原理</h2><p>​    调用者不知道具体时间发生时需要调用的具体函数</p><p>​    被调函数不知道何时被调用，只知道需要完成的任务</p><p>​    当具体时间发生时，调用者通过函数指针调用具体函数，回调机制中的调用者和被调函互不依赖    </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(*Weapon)</span><span class="params">(<span class="keyword">int</span>)</span></span>;  <span class="comment">//重定义函数指针类型</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fight</span><span class="params">(Weapon wp, <span class="keyword">int</span> arg)</span> <span class="comment">//回调函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Fight boss!\n"</span>);</span><br><span class="line">    </span><br><span class="line">    result = wp(arg);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Boss loss: %d\n"</span>, result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">knife</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Knife attack: %d\n"</span>, <span class="number">1</span>);</span><br><span class="line">        ret++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sword</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Sword attack: %d\n"</span>, <span class="number">5</span>);</span><br><span class="line">        ret += <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gun</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Gun attack: %d\n"</span>, <span class="number">10</span>);</span><br><span class="line">        ret += <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fight(knife, <span class="number">3</span>);  <span class="comment">//使用回调函数</span></span><br><span class="line">    fight(sword, <span class="number">4</span>);</span><br><span class="line">    fight(gun, <span class="number">5</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    回调函数就是一个通过函数指针调用的函数。如果你把函数的指针（地址）作为参数传递给另一个函数，当这个指针被用来调用其所指向的函数时，我们就说这是回调函数。回调函数不是由该函数的实现方直接调用，而是在特定的事件或条件发生时由另外的一方调用的，用于对该事件或条件进行响应
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>C语言中的柔性数组</title>
    <link href="http://yoursite.com/2018/06/13/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E6%9F%94%E6%80%A7%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2018/06/13/C语言中的柔性数组/</id>
    <published>2018-06-13T12:55:35.536Z</published>
    <updated>2018-06-18T13:57:49.753Z</updated>
    
    <content type="html"><![CDATA[<p>柔性数组即数组大小待定的数组，应用在了变长结构体中 </p><p>C语言中可以由结构体产生柔性数组</p><p>C语言中结构体的最后一个元素可以是大小未知的数组</p><p>用法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SoftArray</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">array</span>[];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//....</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SoftArray</span> *<span class="title">sa</span>=<span class="title">NULL</span>;</span></span><br><span class="line">sa=(struct SoftArray*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct SoftArray)+<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*<span class="number">5</span>);</span><br><span class="line">sa-&gt;len=<span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>sizeof(struct SoftArray)=4</p><p>struct SoftArray中的array仅是一个待使用的标示符，不占用存储空间</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;柔性数组即数组大小待定的数组，应用在了变长结构体中 &lt;/p&gt;
&lt;p&gt;C语言中可以由结构体产生柔性数组&lt;/p&gt;
&lt;p&gt;C语言中结构体的最后一个元素可以是大小未知的数组&lt;/p&gt;
&lt;p&gt;用法：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>C++中的拷贝构造函数</title>
    <link href="http://yoursite.com/2018/06/13/C++%E4%B8%AD%E7%9A%84%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2018/06/13/C++中的拷贝构造函数/</id>
    <published>2018-06-13T12:51:50.544Z</published>
    <updated>2018-06-13T06:33:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="拷贝构造函数的意义"><a href="#拷贝构造函数的意义" class="headerlink" title="拷贝构造函数的意义"></a>拷贝构造函数的意义</h2><p>​    浅拷贝：拷贝后对象物理状态相同</p><p>​    深拷贝：拷贝后对象的逻辑状态相同</p><p>编译器提供的拷贝构造函数只进行浅拷贝</p><h2 id="什么时候需要进行深拷贝？"><a href="#什么时候需要进行深拷贝？" class="headerlink" title="什么时候需要进行深拷贝？"></a>什么时候需要进行深拷贝？</h2><p>对象有成员指代了系统中的资源</p><p>​    成员指向了动态内存空间</p><p>​    成员打开了外存中的文件</p><p>​    成员使用了系统中的网络端口</p><p>​    。。。。。。。</p><h2 id="一般性原则"><a href="#一般性原则" class="headerlink" title="一般性原则"></a>一般性原则</h2><p>自定义拷贝构造函数，必然需要实现深拷贝</p><p>当类中存在数据成员需要动态开辟内存空间的时候，需要使用深拷贝的方式</p><p>区别：在某些状况下，类内成员变量需要动态开辟堆内存，如果实行位拷贝【位拷贝拷贝的是地址（也叫浅拷贝），而值拷贝则拷贝的是内容（深拷贝） 】，也就是把对象里的值完全复制给另一个对象，如A=B。这时，如果B中有一个成员变量指针已经申请了内存，那A中的那个成员变量也指向同一块内存。这就出现了问题：当B把内存释放了（如：析构），这时A内的指针就是野指针了，出现运行错误。</p><p>​    深拷贝和浅拷贝可以简单理解为：如果一个类拥有资源，当这个类的对象发生复制过程的时候，资源重新分配，这个过程就是深拷贝，反之，没有重新分配资源，就是浅拷贝。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;拷贝构造函数的意义&quot;&gt;&lt;a href=&quot;#拷贝构造函数的意义&quot; class=&quot;headerlink&quot; title=&quot;拷贝构造函数的意义&quot;&gt;&lt;/a&gt;拷贝构造函数的意义&lt;/h2&gt;&lt;p&gt;​    浅拷贝：拷贝后对象物理状态相同&lt;/p&gt;
&lt;p&gt;​    深拷贝：拷贝后对象
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>C++强制类型转换</title>
    <link href="http://yoursite.com/2018/06/11/C++%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <id>http://yoursite.com/2018/06/11/C++强制类型转换/</id>
    <published>2018-06-11T12:34:58.430Z</published>
    <updated>2018-06-11T12:33:51.776Z</updated>
    
    <content type="html"><![CDATA[<p>C++将强制类型转换分为4种不同的类型：</p><ul><li>static_cast</li><li>const_cast</li><li>dynamic_cast</li><li>reinterpret_cast      </li></ul><p>用法：xxx_cast<type>(Expression) </type></p><h2 id="static-cast强制类型转换"><a href="#static-cast强制类型转换" class="headerlink" title="static_cast强制类型转换"></a>static_cast强制类型转换</h2><p>用于基本类型间的转换</p><p>不能用于基本类型指针间的转换</p><p>用于有继承关系类对象之间的转换和类指针之间的转换</p><h2 id="const-cast-强制类型转换"><a href="#const-cast-强制类型转换" class="headerlink" title="const_cast 强制类型转换"></a>const_cast 强制类型转换</h2><p>用于去除变量的只读属性 </p><p>强制转换的目标类型必须是指针或引用    </p><h2 id="reinterpret-cast强制类型转换"><a href="#reinterpret-cast强制类型转换" class="headerlink" title="reinterpret_cast强制类型转换"></a>reinterpret_cast强制类型转换</h2><p>用于指针类型间的强制转换</p><p>用于整数和指针类型间的强制转换</p><h2 id="dynamic-cast强制类型转换"><a href="#dynamic-cast强制类型转换" class="headerlink" title="dynamic_cast强制类型转换"></a>dynamic_cast强制类型转换</h2><p>用于有继承关系的类指针间的转换</p><p>用于有交叉关系的类指针间的转换</p><p>具有类型检查的功能</p><p>需要虚函数的支持</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;C++将强制类型转换分为4种不同的类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;static_cast&lt;/li&gt;
&lt;li&gt;const_cast&lt;/li&gt;
&lt;li&gt;dynamic_cast&lt;/li&gt;
&lt;li&gt;reinterpret_cast      &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用法：
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>计算机中的颜色模型</title>
    <link href="http://yoursite.com/2018/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E7%9A%84%E9%A2%9C%E8%89%B2%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2018/06/09/计算机中的颜色模型/</id>
    <published>2018-06-09T03:50:18.224Z</published>
    <updated>2018-06-08T08:39:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-RGB模型"><a href="#1-RGB模型" class="headerlink" title="1. RGB模型"></a>1. RGB模型</h2><p>　　就编辑图像而言，RGB颜色模型是最佳的色彩模式，可以提供全屏幕的24bit的颜色范围，即真彩色显示。但是，如果将RGB模式用于打印就不是最佳的了，会损失一部分亮度，比较鲜艳的色彩肯定会失真的。  </p><p>　　RGB(red,green,blue)颜色模型最常用的用途就是显示器系统，彩色阴极射线管,彩色光栅图形的显示器都使用R、G、B数值来驱动R、G、B电子枪发射电子，并分别激发荧光屏上的R、G、B三种颜色的荧光粉发出不同亮度的光线，并通过相加混合产生各种颜色；扫描仪也是通过吸收原稿经反射或透射而发送来的光线中的R、G、B成分，并用它来表示原稿的颜色。RGB色彩空间称为与设备相关的色彩空间,因为不同的扫描仪扫描同一幅图像，会得到不同色彩的图像数据；不同型号的显示器显示同一幅图像，也会有不同的色彩显示结果。显示器和扫描仪使用的RGB空间与CIE 1931 RGB真实三原色表色系统空间是不同的，后者是与设备无关的颜色空间。btw：Photoshop的色彩选取器(Color Picker)。可以显示HSB、RGB、LAB和CMYK色彩空间的每一种颜色的色彩值。</p><p>　　我们可知自然界中任何一种色光都可由R、G、B三基色按不同的比例相加混合而成，当三基色分量都为0（最弱）时混合为黑色光；当三基色分量都为k（最强）时混合为白色光。任一颜色F是这个立方体坐标中的一点，调整三色系数r、g、b中的任一系数都会改变F的坐标值，也即改变了F的色值。RGB颜色空间采用物理三基色表示，因而物理意义很清楚，适合彩色显像管工作。然而这一体制并不适应人的视觉特点。因而，产生了其他不同的颜色空间表示法。</p><h2 id="2-HSV模型"><a href="#2-HSV模型" class="headerlink" title="2. HSV模型"></a>2. HSV模型</h2><p>　　HSV(Hue, Saturation, Value)是根据颜色的直观特性由A. R. Smith在1978年创建的一种颜色空间, 也称六角锥体模型(Hexcone Model)。HSV色系对用户来说是一种直观的颜色模型，对于颜色，人们直观的会问”什么颜色？深浅如何？明暗如何？“，而HSV色系则直观的表示了这些信息。</p><p>　　每一种颜色都是由色相（Hue，简H），饱和度（Saturation，简S）和色明度（Value，简V）所表示的。这个模型中颜色的参数分别是：色调（H），饱和度（S），亮度（V）。</p><p>　　色调H参数表示色彩信息，即所处的光谱颜色的位置。该参数用一角度量来表示，取值范围为0°～360°。若从红色开始按逆时针方向计算，红色为0°，绿色为120°，蓝色为240°。它们的补色是：黄色为60°，青色为180°，品红为300°</p><p>　　饱和度S：取值范围为0.0～1.0<br>　　亮度V：取值范围为0.0(黑色)～1.0(白色)。</p><h2 id="3-CMYK模型"><a href="#3-CMYK模型" class="headerlink" title="3. CMYK模型"></a>3. CMYK模型</h2><p>　　CMYK颜色模型包括青(cyan)、品红(magenta)、黄(yellow)和黑(black)，为避免与蓝色混淆，黑色用K表示。青、品红、黄分别是红、绿、蓝三基色的互补色。彩色打印、印刷等应用领域采用打印墨水、彩色涂料的反射光来显现颜色，是一种减色方式。</p><p>　　彩色打印机和彩色印刷都是采用这个原理。由于彩色墨水和颜料的化学特性，用等量的三种基色得到的黑色不是真正的黑色，因此在印刷术中加入一种真正的黑色，所以通常把CMY模型写成CMYK。</p><p>　　CMY是色料三原色，分别是青(Cyan)、品红(Magenta)、黄(Yellow)，利用油墨对光的吸收、透射和反射，产生不同的颜色。一般看到的印刷品的颜色，是经过了色料减色和色光加色两个过程的结果。油墨首先吸收一部分照明光，同时反射出不能吸收的部分，这些反射出来的色光再相互混合，最后以混合光的形式进入人眼，在大脑中形成相应的颜色。色料三原色是减色三原色，混合后能量相减，比原来的颜色灰暗些，理论上等量的三原色混合后产生黑色，但是由于油墨本身的纯度不可能做到理论上的极限值，CMY等量混合后的颜色一般是深灰色，因此再增加一个独立的黑色(K)，共同组成CMKY系统。</p><p>　　CMYK颜色用于打印和印刷复制，通过CMYK的值来确定给墨量，从而最终形成颜色。另外需要将图片进行打印和印刷时，则需要调整为CMYK颜色模式。在在图形制版过程中，首先将图片中的RGB分量提取出来，然后经过计算，得到CMYK的值，再由CMYK的值确定承印物上的颜色，此工艺在印刷过程中称为“分色”。</p><p>RGB、HSV、CMYK之间可以相互转换。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-RGB模型&quot;&gt;&lt;a href=&quot;#1-RGB模型&quot; class=&quot;headerlink&quot; title=&quot;1. RGB模型&quot;&gt;&lt;/a&gt;1. RGB模型&lt;/h2&gt;&lt;p&gt;　　就编辑图像而言，RGB颜色模型是最佳的色彩模式，可以提供全屏幕的24bit的颜色范围，即真彩
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>lua开发环境搭建</title>
    <link href="http://yoursite.com/2018/06/04/lua%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2018/06/04/lua开发环境搭建/</id>
    <published>2018-06-04T12:27:47.006Z</published>
    <updated>2018-06-04T09:46:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>Lua的官方网站：<a href="http://www.lua.org/" target="_blank" rel="noopener">www.lua.org</a><br>win下lua源码编译：进入源码src目录下，执行make mingw（前提已经安装了MinGW）  </p><h2 id="lua直接执行脚本文件"><a href="#lua直接执行脚本文件" class="headerlink" title="-lua直接执行脚本文件"></a>-lua直接执行脚本文件</h2><ul><li>lua file_name</li></ul><h2 id="lua将脚本文件编译成字节码文件"><a href="#lua将脚本文件编译成字节码文件" class="headerlink" title="-lua将脚本文件编译成字节码文件"></a>-lua将脚本文件编译成字节码文件</h2><ul><li>luac -o out_fil file_name  </li></ul><h2 id="lua源码编译后的4个关键目标"><a href="#lua源码编译后的4个关键目标" class="headerlink" title="-lua源码编译后的4个关键目标"></a>-lua源码编译后的4个关键目标</h2><ul><li>Lua — 解释器，用于解释执行脚本或字节码文件</li><li>Luac — 编译器，用于将脚本文件编译成字节码文件</li><li>liblua — 静态链接库，可链接至宿主程序</li><li>lua5x — 动态链接库，可链接至宿主程序  </li></ul><p>注意：如果项目开放源代码可以使用脚本文件，如果是商业使用可以将脚本文件编译成二进制字节码文件。  </p><p>参考博文：<a href="http://www.cnblogs.com/shiwenjie/p/6693998.html" target="_blank" rel="noopener">Eagle-jie-搭建Lua开发环境</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Lua的官方网站：&lt;a href=&quot;http://www.lua.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;www.lua.org&lt;/a&gt;&lt;br&gt;win下lua源码编译：进入源码src目录下，执行make mingw（前提已经安装了MinGW
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Windows下安装MinGW</title>
    <link href="http://yoursite.com/2018/06/04/Windows%E4%B8%8B%E5%AE%89%E8%A3%85MinGW/"/>
    <id>http://yoursite.com/2018/06/04/Windows下安装MinGW/</id>
    <published>2018-06-04T12:23:05.117Z</published>
    <updated>2018-06-04T03:00:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>MinGW是一套集成编译器，mingw32-make是mingw的make工具，mingw32-gcc是mingw的c编译器, mingw32-g++是mingw的c++编译器。</p><p>MinGW官方网址：<a href="http://www.mingw.org" target="_blank" rel="noopener">www.mingw.org</a>，下载mingw-get-setup.exe</p><p>设置环境变量，例如：C:\MinGW\bin，修改mingw32-make为make可以在windows系统下make Makefile  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MinGW是一套集成编译器，mingw32-make是mingw的make工具，mingw32-gcc是mingw的c编译器, mingw32-g++是mingw的c++编译器。&lt;/p&gt;
&lt;p&gt;MinGW官方网址：&lt;a href=&quot;http://www.mingw.org&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Markdown语法</title>
    <link href="http://yoursite.com/2018/06/04/Markdown%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2018/06/04/Markdown语法/</id>
    <published>2018-06-04T12:16:11.781Z</published>
    <updated>2018-06-04T12:20:47.165Z</updated>
    
    <content type="html"><![CDATA[<ol><li>标题：#</li><li>加粗：**xx**</li><li>斜体：_xxx_或者*sss*包括</li><li>无序列表：* xxx、+ xxx、- xxx</li><li>有序列表：1. xx  </li><li>插入图片：![xx](xxxx)</li><li>链接：[xx](xxxx) </li><li>分割线： —或者***</li><li>引言：> xx</li><li>行内代码块：`xxxxx`（反引号就是ESC键下）</li><li>段落代码块：每行4空格、```xxxx```、列表下缩进两个tab</li></ol><p>参考博文：<a href="https://www.jianshu.com/p/20e82ddb37cb" target="_blank" rel="noopener">Markdown 简易入门教程</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;标题：#&lt;/li&gt;
&lt;li&gt;加粗：**xx**&lt;/li&gt;
&lt;li&gt;斜体：_xxx_或者*sss*包括&lt;/li&gt;
&lt;li&gt;无序列表：* xxx、+ xxx、- xxx&lt;/li&gt;
&lt;li&gt;有序列表：1. xx  &lt;/li&gt;
&lt;li&gt;插入图片：![xx](xxxx)&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python环境搭建</title>
    <link href="http://yoursite.com/2018/06/02/python%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2018/06/02/python环境搭建/</id>
    <published>2018-06-02T15:35:27.986Z</published>
    <updated>2018-06-02T15:56:50.049Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p><a href="https://www.anaconda.com/download/" target="_blank" rel="noopener">anaconda</a><br><a href="https://www.jetbrains.com/pycharm/download/#section=windows%20Q%204" target="_blank" rel="noopener">pycharm</a>  </p><p>anaconda指的是一个开源的Python发行版本，装了anaconda就不需要装python了。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;工具&quot;&gt;&lt;a href=&quot;#工具&quot; class=&quot;headerlink&quot; title=&quot;工具&quot;&gt;&lt;/a&gt;工具&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.anaconda.com/download/&quot; target=&quot;_blank&quot; rel=&quot;noop
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python开发QT</title>
    <link href="http://yoursite.com/2018/06/01/python%E5%BC%80%E5%8F%91QT/"/>
    <id>http://yoursite.com/2018/06/01/python开发QT/</id>
    <published>2018-06-01T12:50:51.006Z</published>
    <updated>2018-06-02T15:48:12.263Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-条件："><a href="#1-条件：" class="headerlink" title="1.条件："></a>1.条件：</h2><ul><li>安装python3.x，记得选择pip选项  </li><li>pip3 install sip(dos中输入)</li><li>pip3 install PyQt5  </li></ul><h2 id="2-打包exe"><a href="#2-打包exe" class="headerlink" title="2.打包exe"></a>2.打包exe</h2><ul><li>安装pyinstaller：在cmd中输入pip install pyinstaller　　 </li><li>打包命令：在cmd中输入pyinstaller -F -w <strong>xxx.py</strong><br>-F, –onefile 打包成一个exe文件。<br>-D, –onedir 创建一个目录，包含exe文件，但会依赖很多文件（默认选项）。<br>-c, –console, –nowindowed 使用控制台，无界面(默认)<br>-w, –windowed, –noconsole 使用窗口，无控制台<br>-i：是程序图标，app.py是你要打包的py文件  -i xx.icon   </li></ul><hr><p>py -2 xx.py 选择python2.x版本<br>py -3 xx.py 选择python3.x版本<br>也可以在.py文件中指定#！ python3<br>运行py文件：python xx.py<br>进入python shell终端：输入python按回车<br>查看python版本：python –version</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-条件：&quot;&gt;&lt;a href=&quot;#1-条件：&quot; class=&quot;headerlink&quot; title=&quot;1.条件：&quot;&gt;&lt;/a&gt;1.条件：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;安装python3.x，记得选择pip选项  &lt;/li&gt;
&lt;li&gt;pip3 install sip(do
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>android studio编译</title>
    <link href="http://yoursite.com/2018/03/14/%E5%AE%89%E5%8D%93%E7%BC%96%E8%AF%91/"/>
    <id>http://yoursite.com/2018/03/14/安卓编译/</id>
    <published>2018-03-14T14:46:25.192Z</published>
    <updated>2018-03-14T15:21:32.942Z</updated>
    
    <content type="html"><![CDATA[<h2 id="make-project"><a href="#make-project" class="headerlink" title="make project"></a>make project</h2><ol><li>Make Project：编译Project下所有Module，一般是自上次编译后Project下有更新的文件，不生成apk</li><li>Make Selected Modules：编译指定的Module，一般是自上次编译后Module下有更新的文件，不生成apk<br>3.Clean Project：删除之前编译后的编译文件，并重新编译整个Project，比较花费时间，不生成apk</li><li>Rebuild Project：先执行Clean操作，删除之前编译的编译文件和可执行文件，然后重新编译新的编译文件，不生成apk，这里效果其实跟Clean Project是一致的，这个不知道Google搞什么鬼～～</li><li>Build APK：前面4个选项都是编译，没有生成apk文件，如果想生成apk，需要点击Build APK</li><li>Generate Signed APK：生成有签名的apk  </li></ol><p>推荐书籍：<a href="https://yuedu.baidu.com/ebook/31beb61a9b6648d7c1c746e8" target="_blank" rel="noopener">anroid实用指南</a><br>推荐一款编辑工具：<a href="https://www.sublimetext.com/" target="_blank" rel="noopener">sublime text3</a><br><a href="https://www.cnblogs.com/lianghe01/p/6259769.html" target="_blank" rel="noopener">致谢网友lianghe的贡献</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;make-project&quot;&gt;&lt;a href=&quot;#make-project&quot; class=&quot;headerlink&quot; title=&quot;make project&quot;&gt;&lt;/a&gt;make project&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Make Project：编译Project下所
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android开发准备</title>
    <link href="http://yoursite.com/2018/03/13/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/"/>
    <id>http://yoursite.com/2018/03/13/安卓开发准备/</id>
    <published>2018-03-13T14:05:00.513Z</published>
    <updated>2018-03-14T15:02:15.311Z</updated>
    
    <content type="html"><![CDATA[<h2 id="必要条件"><a href="#必要条件" class="headerlink" title="必要条件"></a>必要条件</h2><ul><li>编程语言：java、kotlin等</li><li>开发环境：JDK、android studion推荐</li></ul><p>曾经android风靡时，大家流行用eclipse+ADT+SDK方式开发安卓应用程序，自从google推出了android studio之后就停止了对ecplise的android相关插件的更新，还有android studio方便好用界面美观，因此赢得大家的青睐</p><h2 id="相关网站"><a href="#相关网站" class="headerlink" title="相关网站"></a>相关网站</h2><p><a href="http://www.oracle.com/technetwork/java/javase/downloads/index-jsp-138363.html" target="_blank" rel="noopener">JDK官网</a><br><a href="http://www.android-studio.org/" target="_blank" rel="noopener">Android Studio 中文社区</a><br><a href="https://developer.android.com" target="_blank" rel="noopener">android官方网站</a><br><em>注意：科学上网</em>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;必要条件&quot;&gt;&lt;a href=&quot;#必要条件&quot; class=&quot;headerlink&quot; title=&quot;必要条件&quot;&gt;&lt;/a&gt;必要条件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;编程语言：java、kotlin等&lt;/li&gt;
&lt;li&gt;开发环境：JDK、android studion推荐&lt;/l
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>域名解析所遇琐事</title>
    <link href="http://yoursite.com/2018/03/12/%E5%9F%9F%E5%90%8D%E6%89%80%E9%81%87%E7%90%90%E4%BA%8B/"/>
    <id>http://yoursite.com/2018/03/12/域名所遇琐事/</id>
    <published>2018-03-12T13:28:04.950Z</published>
    <updated>2018-03-12T13:44:09.834Z</updated>
    
    <content type="html"><![CDATA[<p>大家都知道买了域名之后要做的事就是<strong>域名解析、备案</strong>两件事。不解析的域名是不能够正常访问的因为DNS上没有记录；备案对于购买国外服务器是不需要备案也不能备案，若是国内服务器那是必须强制备案，否者是没有经营权的，注意备案之前也必须实名认证。</p><h1 id="域名解析："><a href="#域名解析：" class="headerlink" title="域名解析："></a>域名解析：</h1><ul><li>主机记录：’www‘表示<a href="http://www.xxx.com解析，‘@’表示主域名解析，‘*’表示泛型解析：xx.xx.com" target="_blank" rel="noopener">www.xxx.com解析，‘@’表示主域名解析，‘*’表示泛型解析：xx.xx.com</a></li><li>记录类型：’A’表示解析一个IPv4地址，’CNAME’表示指向另一个域名（别名），‘NS’表示指定用该dns服务器来解析域名，‘AAAA’表示解析一个IPv6地址</li></ul><p><strong> 注意：在阿里云购买域名会默认DNS服务器，这个最好别轻易修改 </strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;大家都知道买了域名之后要做的事就是&lt;strong&gt;域名解析、备案&lt;/strong&gt;两件事。不解析的域名是不能够正常访问的因为DNS上没有记录；备案对于购买国外服务器是不需要备案也不能备案，若是国内服务器那是必须强制备案，否者是没有经营权的，注意备案之前也必须实名认证。&lt;/p
      
    
    </summary>
    
    
  </entry>
  
</feed>
